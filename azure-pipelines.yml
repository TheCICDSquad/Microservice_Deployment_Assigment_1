trigger:
- main

variables:
  pythonVersion: '3.10'  # Using stable LTS version
  appDirectory: 'Microservice_Deployment_Assigment_1/app'

pool:
  name: 'Linux_Agent'

steps:
# Step 1: Try system Python first
- script: |
    # Check for existing Python installations
    if command -v python3 &> /dev/null; then
      echo "Using existing Python: $(python3 --version)"
      python3 -m pip install --upgrade pip
      exit 0
    else
      exit 1
    fi
  displayName: 'Check for existing Python'
  continueOnError: true

# Step 2: Install Python from deadsnakes PPA (Ubuntu)
- script: |
    sudo apt-get update
    sudo apt-get install -y software-properties-common
    sudo add-apt-repository ppa:deadsnakes/ppa -y
    sudo apt-get update
    sudo apt-get install -y python$(pythonVersion) python$(pythonVersion)-venv python3-pip
    python$(pythonVersion) --version
  displayName: 'Install Python via PPA'
  condition: failed()
  env:
    DEBIAN_FRONTEND: noninteractive

# Step 3: Fallback to manual download (no compilation)
- script: |
    wget https://www.python.org/ftp/python/3.10.13/Python-3.10.13.tar.xz
    tar xf Python-3.10.13.tar.xz
    cd Python-3.10.13
    ./configure --enable-optimizations --with-ensurepip=install
    make
    sudo make altinstall
    python3.10 --version
  displayName: 'Install Python from source'
  condition: failed()
  env:
    DEBIAN_FRONTEND: noninteractive

# Step 4: Verify Python installation
- script: |
    python$(pythonVersion) --version || python3 --version
    python3 -m pip install --upgrade pip
  displayName: 'Verify Python'

# Step 5: Install dependencies and run application
- script: |
    cd $(appDirectory)
    pip install -r requirements.txt
    python main.py
  displayName: 'Run application'

# Optional Docker steps if needed
- task: Docker@2
  displayName: 'Build Docker image'
  inputs:
    command: 'build'
    repository: 'your-app-name'
    dockerfile: '$(appDirectory)/Dockerfile'
    tags: |
      latest
  condition: succeeded()