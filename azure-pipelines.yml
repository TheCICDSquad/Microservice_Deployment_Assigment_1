trigger:
- main

variables:
  imageName: 'your-python-app'
  dockerRegistryServiceConnection: 'your-docker-registry-service-connection'
  tag: '$(Build.BuildId)'
  pythonVersion: '3.10'  # Using a stable LTS version instead of 3.x

pool:
  name: 'Linux_Agent'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(pythonVersion)'
    addToPath: true
    architecture: 'x64'

# Alternative Python installation if the above fails
- script: |
    sudo apt-get update
    sudo apt-get install -y python$(pythonVersion) python$(pythonVersion)-dev python3-pip
    sudo update-alternatives --install /usr/bin/python python /usr/bin/python$(pythonVersion) 1
    sudo update-alternatives --set python /usr/bin/python$(pythonVersion)
    python --version
  displayName: 'Install Python (fallback)'
  condition: failed()

- script: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt
  displayName: 'Install dependencies'

- script: |
    python -m pytest
  displayName: 'Run tests'

- task: Docker@2
  displayName: 'Build Docker image'
  inputs:
    command: 'build'
    repository: $(imageName)
    dockerfile: '**/Dockerfile'
    tags: |
      $(tag)
      latest

- task: Docker@2
  displayName: 'Push Docker image'
  inputs:
    command: 'push'
    repository: $(imageName)
    tags: |
      $(tag)
      latest
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))